<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <title>Notification App</title>
    <script src="https://cdn.socket.io/4.3.2/socket.io.min.js" integrity="sha384-KAZ4DtjNhLChOB/hxXuKqhMLYvx3b5MlT55xPEiNmREKRzeEm+RVPlTnAn0ajQNs" crossorigin="anonymous"></script>
    <script src='https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js'></script>
  </head>
  <body>
    <h1>Notification App</h1>

    <form id='notificationForm'>
      <input
        type='text'
        id='message'
        placeholder='Enter your message'
        required
      />
      <button type='submit'>Send Notification</button>
    </form>

    <ul id='notifications'></ul>

    <script>
      const socket = io('http://localhost:3001', {
        transports: ['websocket'],
      });

      socket.on('connect', function() {
        console.log('Connected to server');
      });

      socket.emit('notify', { init: true }, (data) => {
        for (const item of data?.data) {
          const notifyEl = document.getElementById(`${item.id}`);

          if (!notifyEl) {
              const newElement = document.createElement('li');
              newElement.id = item.id;
              newElement.textContent = item.message;

              // 확인 버튼 생성
              const confirmButton = document.createElement('button');
              confirmButton.textContent = '확인';
              confirmButton.onclick = function() {
                // 버튼 클릭 시 실행할 코드 작성
                axios.post(`http://localhost:3001/ack/1/${item.id}`)
                .then((res) => {
                  newElement.remove();
                })
              };

              // li 엘리먼트에 버튼 추가
              newElement.appendChild(confirmButton);

              // notifications 엘리먼트에 li 추가
              document.getElementById('notifications').appendChild(newElement);
          }
        }
      });

      socket.on('notify', (data) => {
        const notifyEl = document.getElementById(`${data.id}`);

        if (!notifyEl) {
          const newElement = document.createElement('li');
          newElement.id = data.id;
          newElement.textContent = data.message;

          // 확인 버튼 생성
          const confirmButton = document.createElement('button');
          confirmButton.textContent = '확인';
          confirmButton.onclick = async () => {
            // 버튼 클릭 시 실행할 코드 작성
            const result = await axios.post(`http://localhost:3001/ack/1/${data.id}`)
            
            if (result) {
              newElement.remove();
              socket.emit('delete', { id: data.id });
            }
          };

          // li 엘리먼트에 버튼 추가
          newElement.appendChild(confirmButton);

          // notifications 엘리먼트에 li 추가
          document.getElementById('notifications').appendChild(newElement);
        }
      });

      socket.on('delete', (data) => {
        const notifyEl = document.getElementById(`${data.id}`);
        notifyEl.remove();
      });



      document
      .getElementById('notificationForm')
      .addEventListener('submit', (event) => {
        event.preventDefault();

        const message = document.getElementById('message').value;

        axios.post('http://localhost:3000/send-notify', { message: message })
        .then(response => {
          const resData = response.data;
          socket.emit('submit', resData);
        })
        .catch(error => {
          console.error('Error sending notification', error); 
        });
      });
    </script>
  </body>
</html>
